{"remainingRequest":"/home/runner/work/U2_Teoria_Organizacional/U2_Teoria_Organizacional/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Teoria_Organizacional/U2_Teoria_Organizacional/src/views/curso/Tema2.vue?vue&type=template&id=cfaf7122&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Teoria_Organizacional/U2_Teoria_Organizacional/src/views/curso/Tema2.vue","mtime":1741218535157},{"path":"/home/runner/work/U2_Teoria_Organizacional/U2_Teoria_Organizacional/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Teoria_Organizacional/U2_Teoria_Organizacional/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Teoria_Organizacional/U2_Teoria_Organizacional/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Teoria_Organizacional/U2_Teoria_Organizacional/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Teoria_Organizacional/U2_Teoria_Organizacional/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}